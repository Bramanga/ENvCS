;ok some important variables
SET [0x5ffa], 0 ;did we print a command?
set [0x7FFF], 0x8000 ;video pointer
SET PC, boot

:unknownc    dat " Unknown Command", 0
:intro       dat " Loading Env v 0.2.0", 0
:hardware    dat " Hardware probing and initialization will go here", 0
:typehelp    dat " Type 'help' for a list of commands", 0
:helpout     dat " Current commands are: help, reset, about, load", 0
:abouttext   dat " ENvOS, Written by Hjax, v0.1.2, type 'help' to view a list of commands", 0
:welcome     dat " Welcome to ENvOS", 0
:prompt      dat "> ", 0
:boot        SET b, intro
             JSR printdat
             JSR newline
             SET b, hardware
             JSR printdat
             JSR newline
             SET B, welcome
             JSR printdat
             JSR newline
             SET b, typehelp
             JSR printdat
             JSR newline
             SET b, prompt
             JSR printdat
             set PC, main

:printdat    IFE [0x7FFf], 0x8200
             JSR scroll
	     set a, [b]
             ife a, 0
             set PC, POP
	     bor a, 0xf100
	     set c, [0x7FFF]
             set [c], a
	     add b, 1
	     add [0x7FFF], 1
	     set PC, printdat
:append      bor I, 0xf100
             SET c, [0x7FFF]
             SET [c], I
             ADD [0x7FFF], 1
             SET Pc, POP
:main        ife [0x9000], 0     ; if the user hasn't typed anything in yet
             set PC, main        ;continue waiting
             ife [0x9000], 0xA   ;the user hit enter, proccess the command!
             JSR command
             ife [0x9000], 0x8   ;the user hit the delete key
             SET PC, delete
             SET I, [0x9000]
             SET [0x9000], 0
             SET B, [0x7FFF]
             MOD B, 32
             IFE B, 0
             SET PC, main
             IFN I, 0
             jsr append
             SET PC, main

:delete      SUB [0x7FFF], 1
             SET Z, [0x7FFF]
             SET J, Z
             MOD J, 32
             IFE J, 1
             ADD [0x7FFF], 1
             SET [Z], 0x0000
             SET [0x9000], 0
             SET PC, main

:newline
  	     set i, [0x7FFF]
             SUB I, 0x8000
 	     mod i, 32
	     set z, 32
 	     sub z, i
 	     add [0x7FFF], z
 	     set pc, pop

:command     SET [0x9000], 0
             SET [0x5FFA], 0
             JSR newline
             SET Y, [0x7FFF]
             SUB Y, 0x001E
             ife [Y], 0xF168
             JSR help
             ife [y], 0xF172
             JSR reset
             ife [y], 0xF161
             set PC, about
             ife [y], 0xF16C
             JSR loaddemo
             ife [0x5FFA], 0
             JSR unknown
             set Z, 0x0000
             SET Y, 0x0000
             SET PC, POP

:reset       SET [0x7FFF], 0x8000
             JSR resettwo
             SET [0x7FFF], 0x8000
             set b, prompt
             jsr printdat
             set [0x5FFA], 1
             SET PC, pop
:resettwo    SET C, [0x7FFF]
             SET [C], 0x0000
             ADD [0x7FFF], 1
             SET C, [0x7FFF]
             ife C, 0x81FF
             SET PC, POP
             SET PC, resettwo

:unknown     SET B, unknownc
             JSR printdat
             JSR newline
             SET B, prompt
             JSR printdat
             SET PC, POP
:about       SET B, abouttext
             JSR printdat
             JSR newline
             SET B, prompt
             JSR printdat
             SET [0x5FFA], 1
             set pc, pop
:help        SET b, helpout
             JSR printdat
             SET [0x5FFA], 1
             JSR newline
             SET b, prompt
             JSR printdat
             SET PC, POP
:loading     SET C, [0x7FFF]
             set X, 0x003C
             bor X, 0xf400
             SET Y, 0x003E
             bor Y, 0xf400
             SET [C], X
             ADD C, 0x001F
             SET [C], Y
             SET [0x5FFA], 1
             SET PC, pop

:loaddemo    JSR loading
             ADD [0x7FFF], 1
             JSR loadkb
             SET [0x5FFA], 1
             JSR newline
             SET b, prompt
             JSR printdat
             SET PC, POP

:loadkb      IFe [0x9000], 0x0000
             SET PC, loadkb
             SET Z, [0x9000]
             bor z, 0xf100
             IFE Z, 0xF102
             JSR loadadd
             IFE Z, 0xF101
             JSR loaddel
             IFE Z, 0xF171
             SET [0x9000], 0
             IFE Z, 0xF171
             SET Pc, pop
             SET [0x9000], 0
             set PC, loadkb

:loadadd     SET Y, 0x0020
             SET Y, [0x7FFF]
             SUB Y, 0x8000
             MOD Y, 32
             IFE J, 1
             ADD [0x7FFF], 1
             IFE Y, 31
             SUB [0x7FFF], 1
             IFE Y, 0
             ADD [0x7FFF], 1
             bor y, 0xf200
             set a, [0x7FFF]
             set [a], y
             ADD [0x7FFF], 1
             SET J, 0
             SET PC, pop

:loaddel     IFE J, 0
             SUB [0x7FFF], 1
             SET Y, [0x7FFF]
             sub Y, 0x8000
             mod y, 32
             IFE Y, 0
             ADD [0x7FFF], 1
             IFE y, 31
             SUB [0x7FFF], 1
             set a, [0x7FFF]
             set [a], 0x0000
             set [0x9000], 0
             SUB [0x7FFF], 1
             SET J, 1
             SET PC, pop
:scroll
	set x, 0x8000
	set z, 0x8020

	set j, sp			; nifty stack pointer abuse :P
	set sp, 0x8000

	:scroll_loop
		set pop, [z]
		set pop, [1+z]
		set pop, [2+z]
		set pop, [3+z]
		set pop, [4+z]
		set pop, [5+z]
		set pop, [6+z]
		set pop, [7+z]
		set pop, [8+z]
		set pop, [9+z]
		set pop, [10+z]
		set pop, [11+z]
		set pop, [12+z]
		set pop, [13+z]
		set pop, [14+z]
		set pop, [15+z]
		set pop, [16+z]
		set pop, [17+z]
		set pop, [18+z]
		set pop, [19+z]
		set pop, [20+z]
		set pop, [21+z]
		set pop, [22+z]
		set pop, [23+z]
		set pop, [24+z]
		set pop, [25+z]
		set pop, [26+z]
		set pop, [27+z]
		set pop, [28+z]
		set pop, [29+z]
		set pop, [30+z]
		set pop, [31+z] ; unrolled loop. So sue me :P

		add z, 32
		ifg z, 0x8231
			set pc, scroll_end
		set pc, scroll_loop

	:scroll_end
		set sp, j
		set [0x1335], 0x81e0
                SUB [0x7FFF], 0x0020
		set pc, pop
